/* HashMap */
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* fairCandySwap(int* A, int ASize, int* B, int BSize, int* returnSize){
    int *HashMap = (int *)malloc(sizeof(int)*1000000);
    int* result = (int*) malloc(sizeof(int)*2);
    *returnSize=2;
    memset(HashMap, 0, sizeof(HashMap));
    int sum1 = 0;
    int sum2 = 0;
    for(int i = 0; i < ASize; i++)
    {
        sum1 += A[i];
        HashMap[A[i]] = 1;
    }
    //for(int i=0;i< 10;i++)
      //  printf("%d ",HashMap[i]);
    for(int i = 0; i < BSize; i++)
        sum2 += B[i];
    int tmp = (sum1 - sum2) / 2;
    //printf("%d ",tmp);
    for(int i = 0; i < BSize; i++)
        if((tmp + B[i]) > 0 && HashMap[tmp + B[i]] == 1)
        {            
            result[0] = tmp + B[i];
            result[1] = B[i];
            break;
        }
    free(HashMap);
    return result;
}

